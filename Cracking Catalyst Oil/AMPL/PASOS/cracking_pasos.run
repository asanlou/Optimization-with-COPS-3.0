model cracking_pasos.mod;
data cracking_pasos.dat;

option solver minos;
option minos_options 'major_iterations=1000'; 

solve;

param OutputFileMat symbolic := "output_pasos_mat.txt";
param OutputFile symbolic := "output_pasos.txt";


display '---------------------------------------';

display 'minos';
display _total_solve_time;
display theta[1],theta[2],theta[3];

print 'SOLVER -> MINOS 5.51: optimal solution found. ' > (OutputFile);

print 'Valor de la funcion objetivo -> ',z >> (OutputFile);
print 'Tiempo empleado -> ',_total_solve_time >> (OutputFile);

print 'theta1=',theta[1] >> (OutputFile);
print 'theta2=',theta[2] >> (OutputFile);
print 'theta3=',theta[3] >> (OutputFile);

print 'MINOS 5.51' > (OutputFileMat);
print " " >> (OutputFileMat);
print theta[1] >> (OutputFileMat);
print theta[2] >> (OutputFileMat);
print theta[3] >> (OutputFileMat);
print " " >> (OutputFileMat);
for {j in N1} {
print y1[j] >> (OutputFileMat);
}
print " " >> (OutputFileMat);
for {j in N1} {
print y2[j] >> (OutputFileMat);
}

print '---------------------------------------' >> (OutputFile);
print '---------------------------------------' >> (OutputFileMat);
display '---------------------------------------';

option solver loqo;
solve;

display 'loqo';
display _total_solve_time;
display theta[1],theta[2],theta[3];

print 'SOLVER -> LOQO 7.03: optimal solution ' >> (OutputFile);

print 'Valor de la funcion objetivo -> ',z >> (OutputFile);
print 'Tiempo empleado -> ',_total_solve_time >> (OutputFile);

print 'theta1=',theta[1] >> (OutputFile);
print 'theta2=',theta[2] >> (OutputFile);
print 'theta3=',theta[3] >> (OutputFile);

print 'LOQO 7.03' >> (OutputFileMat);
print " " >> (OutputFileMat);
print theta[1] >> (OutputFileMat);
print theta[2] >> (OutputFileMat);
print theta[3] >> (OutputFileMat);
print " " >> (OutputFileMat);
for {j in N1} {
print y1[j] >> (OutputFileMat);
}
print " " >> (OutputFileMat);
for {j in N1} {
print y2[j] >> (OutputFileMat);
}
print '---------------------------------------' >> (OutputFile);
print '---------------------------------------' >> (OutputFileMat);
display '---------------------------------------';

option solver conopt;
solve;

display 'conopt';
display _total_solve_time;
display theta[1],theta[2],theta[3];

print 'SOLVER -> CONOPT 3.17A: Locally optimal ' >> (OutputFile);

print 'Valor de la funcion objetivo -> ',z >> (OutputFile);
print 'Tiempo empleado -> ',_total_solve_time >> (OutputFile);

print 'theta1=',theta[1] >> (OutputFile);
print 'theta2=',theta[2] >> (OutputFile);
print 'theta3=',theta[3] >> (OutputFile);

print 'CONOPT 3.17A' >> (OutputFileMat);
print " " >> (OutputFileMat);
print theta[1] >> (OutputFileMat);
print theta[2] >> (OutputFileMat);
print theta[3] >> (OutputFileMat);
print " " >> (OutputFileMat);
for {j in N1} {
print y1[j] >> (OutputFileMat);
}
print " " >> (OutputFileMat);
for {j in N1} {
print y2[j] >> (OutputFileMat);
}

print '---------------------------------------' >> (OutputFile);
print '---------------------------------------' >> (OutputFileMat);
display '---------------------------------------';

option solver snopt;
solve;

display 'snopt';
display _total_solve_time;
display theta[1],theta[2],theta[3];

print 'SOLVER -> SNOPT 7.5-1.2: Optimal solution found ' >> (OutputFile);

print 'Valor de la funcion objetivo -> ',z >> (OutputFile);
print 'Tiempo empleado -> ',_total_solve_time >> (OutputFile);

print 'theta1=',theta[1] >> (OutputFile);
print 'theta2=',theta[2] >> (OutputFile);
print 'theta3=',theta[3] >> (OutputFile);

print 'SNOPT 7.5-1.2' >> (OutputFileMat);
print " " >> (OutputFileMat);
print theta[1] >> (OutputFileMat);
print theta[2] >> (OutputFileMat);
print theta[3] >> (OutputFileMat);
print " " >> (OutputFileMat);
for {j in N1} {
print y1[j] >> (OutputFileMat);
}
print " " >> (OutputFileMat);
for {j in N1} {
print y2[j] >> (OutputFileMat);
}

print '---------------------------------------' >> (OutputFileMat);


#KNITRO es un solver de pago. No nos permite emplearlo debido 
#a las dimensiones de nuestro problema.
#print '---------------------------------------' >> (OutputFile);
#display '---------------------------------------';

#option solver knitro;
#solve;

#display 'knitro';
#display _total_solve_time;
#display theta[1],theta[2],theta[3];

#print 'SOLVER -> knitro ' >> (OutputFile);

#print 'Valor de la funcion objetivo -> ',z >> (OutputFile);
#print 'Tiempo empleado -> ',_total_solve_time >> (OutputFile);

#print 'theta1=',theta[1] >> (OutputFile);
#print 'theta2=',theta[2] >> (OutputFile);
#print 'theta3=',theta[3] >> (OutputFile);




